using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Linq;

namespace Hashset
{
    class Program
    {
        static void Main(string[] args)
        {
            string y;
            Person[][] Hashset = new Person[3][];
            string[] lines;
            StringBuilder output = new StringBuilder();
            List<Person> people = new List<Person>();
            Person  OtherPerson, OtherPerson1;
            int c;

            y = args[0];

            if (!File.Exists(y))
            {
                output.AppendLine("Cedula,Nombres,Apellidos,ContraseÃ±a,Ahorros,Paquete");
                File.AppendAllText(y, output.ToString());
            }

            lines = File.ReadAllLines(y);

            int count = 0;
            foreach (var l in lines)
            {
                count++;
                if (count > 1)
                {
                    people.Add(Person.FromLine(l));
                }                
            }

            Hashset[0] = new Person[3];
            Hashset[1] = new Person[3];
            Hashset[2] = new Person[3];


            int[] counter = new int[3];
            counter[0] = 0;
            counter[1] = 0;
            counter[2] = 0;

            foreach (Person p in people)
            {   
                c = (p.GetHashCode()) % 3;
                if(c == 0)
                {

                    Hashset[c][counter[0]] = p; 
                    counter[0]++;
                }
                else if(c == 1)
                {
                    Hashset[c][counter[1]] = p; 
                    counter[1]++;
                }  
                else
                {
                    Hashset[c][counter[2]] = p; 
                    counter[2]++;
                } 

            }
            
        }
        static bool Search(Person p, Person[][] people, int[] counter)
        {
            int l, h, m;         
            
            for(int i = 0; i < people.Length; i++)
            {
                h = counter[i];
                l = 0;
                while (l <= h)
                {
                    m = (l + h) / 2;
                    if (($"{p}".CompareTo($"{people[i][m]}")) == 0)
                        return true;
                    else if (($"{p}".CompareTo($"{people[i][m]}")) < 0)
                        h = m - 1;
                    else
                        l = m + 1;
                }
            }            
            return false;
        }
        static bool Add(Person p, Person[][] Hashset, int[] counter)
        {
            int c, d;
            Person[] guard;
            if (Program.Search(p, Hashset, counter) == true)
            {
                return false;
            }

            c = (p.GetHashCode()) % 3;                      
            Hashset[c][counter[c]] = p;
            counter[c]++;

            if(counter[c] == Hashset[c].Length)
            {
                guard = new Person[Hashset[c].Length];
                for(int i = 0; i < Hashset[c].Length; i++)
                {
                    guard[i] = Hashset[c][i];                                        
                } 
                d = Hashset[c].Length * 2;
                Hashset[c] = new Person[d];
                for(int i = 0; i < guard.Length; i++)
                {
                    Hashset[c][i] = guard[i];                                        
                }
            } 
            return true;
        }
        static bool Remove(Person p, Person[][] Hashset, int[] counter)
        {
            int l, m, h;

            if (Program.Search(p, Hashset, counter) == false)
            {
                return false;
            }
            for(int i = 0; i < Hashset.Length; i++)
            {
                h = counter[i];
                l = 0;
                while (l <= h)
                {
                    m = (l + h) / 2;
                    if (($"{p}".CompareTo($"{Hashset[i][m]}")) == 0)
                    {
                        for(int jj = m; jj < counter[i]; jj++)
                        {
                            if(jj == (counter[i] - 1))
                            {
                                Hashset[i][jj] = null;
                                counter[i]--;
                            }
                            Hashset[i][jj] = Hashset[i][jj + 1];
                        }
                    }
                    else if (($"{p}".CompareTo($"{Hashset[i][m]}")) < 0)
                        h = m - 1;
                    else
                        l = m + 1;
                }
            }
            return true;
        }
        static bool Updata(Person pOld, Person pNew, Person[][] Hashset, int[] counter)
        {
            int l, m, h; 
            if ((Program.Search(pOld, Hashset, counter) == false) ||  (((Program.Into(pNew.id, Hashset, counter)) == true) && (pNew.id != pOld.id)))
            {
                return false;
            }
            for(int i = 0; i < Hashset.Length; i++)
            {
                h = counter[i];
                l = 0;
                while (l <= h)
                {
                    m = (l + h) / 2;
                    if (($"{pOld}".CompareTo($"{Hashset[i][m]}")) == 0)
                    {
                       Hashset[i][m] = pNew;
                    }
                    else if (($"{pOld}".CompareTo($"{Hashset[i][m]}")) < 0)
                        h = m - 1;
                    else
                        l = m + 1;
                }
            }
            return true;
        }
        static bool Into(string id, Person[][] Hashset, int[] counter)
        {
            for (int i = 0; i < Hashset.Length; i++)
            {
                for (int jj = 0; jj < counter[i]; jj++)
                {
                    if(Hashset[i][jj].id == id)
                    {
                        return true;
                    }                   
                }          
            }       
            return false;
        }
    }
}
